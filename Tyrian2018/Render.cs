using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Drawing;

namespace Tyrian
{
    /// <summary>
    /// Object of this class construct all sprites with specified parameters 
    /// like dimensions, position, speed and textures
    /// </summary>
    public class Render
    {
        Random r = new Random();
        public PictureBox pictureBox1; //access to the picture box

        public Sprite[] asteroid = new Sprite[Game.asteroid_count]; //Prepare pointers to the specified numbers of asteroids
        public Sprite[] bullet = new Sprite[Game.bullet_count]; //Prepare pointers to the specified numbers of bullets
        public Sprite player = new Sprite(100, 100); //Create player sprite 
        public Sprite game_over = new Sprite(600, 800, (Game.width / 2) - 400, 150); //Create game over sprite
        public Sprite explosion = new Sprite(1, 1); //Create explosion sprite
        
        public Bitmap player_img = new Bitmap(Tyrian.Properties.Resources.spaceship); //load texture of spaceship
        public Bitmap asteroid_img = new Bitmap(Tyrian.Properties.Resources.asteroid); //load texture of asteroid
        public Bitmap fire_img = new Bitmap(Tyrian.Properties.Resources.fire); //load texture of fire
        public Bitmap game_over_img = new Bitmap(Tyrian.Properties.Resources.gmover); //load texture of game over
        public Bitmap explosion_img = new Bitmap(Tyrian.Properties.Resources.explosion); //load texture of explosion

        /// <summary>
        /// Constructor of render object. Hide cursor inside game window.
        /// Adjust game window size according to Game.cs parameters,
        /// show player and hide game over sprite.
        /// </summary>
        /// <param name="pictureBox1">Access to the pictureBox1</param>
        /// <param name="game">Access to the Game.cs ibject</param>
        public Render(PictureBox pictureBox1, Game game) 
        {
            this.pictureBox1 = pictureBox1;
            this.pictureBox1.Size = new System.Drawing.Size(Game.width, Game.height);
            game_over.visible = false;
            player.visible = true;
            Cursor.Hide();
        }

        /// <summary>
        /// Initialize all asteroid objects with random position
        /// </summary>
        public void InitAsteroids()
        {
            for (int i = 0; i < Game.asteroid_count; i++)
            {
                asteroid[i] = new Sprite(r.Next(40, 300), r.Next(0, Game.width), r.Next(-600, -300), r.Next(1, Game.asteroid_max_speed), true, true);
            }

        }
        /// <summary>
        /// Initialize all bullet objects but hide it.
        /// </summary>
        public void InitBullet()
        {
            for (int i = 0; i < Game.bullet_count; i++)
            {
                bullet[i] = new Sprite(180, 150, 0, 0, Game.bullet_speed, false, false );
            }
        }
      
        /// <summary>
        /// Redraw all sprites with new position generated by Phisics.cs and Sprite.cs
        /// </summary>
        /// <param name="e">Object sender to the paintEventArgs</param>        
        public void Display(PaintEventArgs e)
        {
            for (int i = 0; i < Game.asteroid_count; i++)
            {
                if (asteroid[i].visible) e.Graphics.DrawImage(asteroid_img, asteroid[i].position_x, asteroid[i].position_y, asteroid[i].height, asteroid[i].width);
            }

            for (int i = 0; i < Game.bullet_count; i++)
            {
                if (bullet[i].visible) e.Graphics.DrawImage(fire_img, bullet[i].position_x, bullet[i].position_y, bullet[i].height, bullet[i].width);
            }

            if (game_over.visible)
            {
                e.Graphics.DrawImage(game_over_img, game_over.position_x, game_over.position_y, game_over.height, game_over.width);
            }

            if (player.visible) e.Graphics.DrawImage(player_img, player.position_x, player.position_y, player.height, player.width);
            if (explosion.visible) e.Graphics.DrawImage(explosion_img, explosion.position_x, explosion.position_y, explosion.height, explosion.width);
        }

        
        /// <summary>
        /// Refresh PictureBox with previously rendered sprites
        /// </summary>
        /// <param name="pictureBox1">Object sender to the pictureBox</param>
        public void NextFrame(PictureBox pictureBox1)
        {
            pictureBox1.Invalidate();  //pouziva sa na refresh hracej plochy        
        }



    }
}
